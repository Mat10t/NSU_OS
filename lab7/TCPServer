#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <signal.h>

#define SERVER_IP "127.0.0.1"
#define PORT 12345
#define BUFSIZE 1024

void handleClient(int clientSocket, struct sockaddr_in address) {
    char buffer[BUFSIZE];
    ssize_t bytesRead;

    printf("Client connected: %s:%d; PID: %d\n", inet_ntoa(address.sin_addr), ntohs(address.sin_port), getpid());

    while (1) {
        bytesRead = read(clientSocket, buffer, sizeof(buffer));
        if (bytesRead < 0) {
            perror("Error read");
            exit(EXIT_FAILURE);
        } else if (bytesRead == 0) {
            printf("Client disconnected: %s:%d\n", inet_ntoa(address.sin_addr), ntohs(address.sin_port));
            close(clientSocket);
            exit(EXIT_SUCCESS);
        }

        if (write(clientSocket, buffer, bytesRead) != bytesRead) {
            perror("Error send");
            close(clientSocket);
            exit(EXIT_FAILURE);
        }
    }
}

int main() {
    int serverSocket, clientSocket;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrLen = sizeof(clientAddr);;

    signal(SIGCHLD, SIG_IGN);

    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == -1) {
        perror("Error socket");
        exit(EXIT_FAILURE);
    }

    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    if (bind(serverSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("Error socket bind");
        close(serverSocket);
        exit(EXIT_FAILURE);
    }
    if (listen(serverSocket, 10) == -1) {
        perror("listen");
        close(serverSocket);
        exit(EXIT_FAILURE);
    }

    printf("Server port %d\n", PORT);

    while (1) {

        clientSocket = accept(serverSocket, (struct sockaddr *)&clientAddr, &addrLen);
        if (clientSocket == -1) {
            perror("Error accept");
            close(serverSocket);
            exit(EXIT_FAILURE);
        }

        pid_t pid = fork();
        if (pid == 0) {
            close(serverSocket);
            handleClient(clientSocket, clientAddr);
        } else if (pid > 0) {
            close(clientSocket);
        } else {
            perror("Error fork");
            close(clientSocket);
            close(serverSocket);
            exit(EXIT_FAILURE);
        }
    }

    close(serverSocket);
    return EXIT_SUCCESS;
}
