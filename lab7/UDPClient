#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 12345
#define BUF_SIZE 1024

int main() {
    int sockfd;
    char buffer[BUF_SIZE];
    struct sockaddr_in serverAddr;
    socklen_t addrLen = sizeof(serverAddr);

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(SERVER_PORT);
    serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    printf("Write (q for exit):\n");
    
    while (1) {
        fgets(buffer, BUF_SIZE, stdin);

        size_t len = strlen(buffer);
        if (buffer[len - 1] == '\n') {
            buffer[len - 1] = '\0';
        }
        if (strcmp(buffer, "q") == 0) {
            break;
        }

        ssize_t sentBytes = sendto(sockfd, buffer, len, 0, (const struct sockaddr *)&serverAddr, addrLen);
        if (sentBytes == -1) {
            perror("error send bytes");
            close(sockfd);
            exit(EXIT_FAILURE);
        }

        ssize_t recvBytes = recvfrom(sockfd, buffer, sizeof(buffer), 0, NULL, NULL);
        if (recvBytes == -1) {
            perror("error recieve bytes");
            close(sockfd);
            exit(1);
        }
        printf("Server answer: %s\n", buffer);
    }

    close(sockfd);
    return EXIT_SUCCESS;
}
