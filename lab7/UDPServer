#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 12345
#define BUF_SIZE 1024
#define SERVER_IP "127.0.0.1"

int main() {
    int sockfd;
    char buffer[BUF_SIZE];
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrLen;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    if (bind(sockfd, (const struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("Bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("UDP Server started on port %d\n", PORT);

    while (1) {
        addrLen = sizeof(clientAddr);
        ssize_t recvBytes = recvfrom(sockfd, buffer, BUF_SIZE, 0, (struct sockaddr *)&clientAddr, &addrLen);
        if (recvBytes < 0) {
            perror("recvfrom failed");
            close(sockfd);
            exit(EXIT_FAILURE);
        }

        buffer[recvBytes] = '\0';
        printf("Received from client %s:%d: %s\n", inet_ntoa(clientAddr.sin_addr), ntohs(clientAddr.sin_port), buffer);

        ssize_t sendBytes = sendto(sockfd, buffer, recvBytes, 0, (const struct sockaddr *)&clientAddr, addrLen);
        if (sendBytes == -1) {
            perror("Error send bytes");
            close(sockfd);
            exit(EXIT_FAILURE);
        }
    }

    close(sockfd);
    return 0;
}
